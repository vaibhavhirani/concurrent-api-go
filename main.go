package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"time"
)

// var wg = sync.WaitGroup{}

func main() {
	url := "https://api.publicapis.org/entries"
	getAPI(url)
}

type AutoGenerated struct {
	Count   int `json:"count"`
	Entries []struct {
		API         string `json:"API"`
		Description string `json:"Description"`
		Auth        string `json:"Auth"`
		HTTPS       bool   `json:"HTTPS"`
		Cors        string `json:"Cors"`
		Link        string `json:"Link"`
		Category    string `json:"Category"`
	} `json:"entries"`
}

func getAPI(url string) {
	var status200 int
	var status300 int
	var status400 int
	var status500 int
	// var responseCode string

	resp, _ := http.Get(url)
	byteResponse, _ := ioutil.ReadAll(resp.Body)
	responseStruct := AutoGenerated{}
	err := json.Unmarshal(byteResponse, &responseStruct)
	if err != nil {
		fmt.Print(err)
	}

	fmt.Println(len(responseStruct.Entries))

	client := &http.Client{
		Timeout: 2 * time.Second,
	}

	// wg.Add(1)
	for _, v := range responseStruct.Entries {
		go httpClientConcurrent(v.Link, client)
		// wg.Wait()
		// httpClientConcurrent(v.Link, client)
		// fmt.Println(v.Link, responseCode)
		// if strings.HasPrefix(responseCode, "2") {
		// 	status200 += 1
		// } else if strings.HasPrefix(responseCode, "3") {
		// 	status300 += 1
		// } else if strings.HasPrefix(responseCode, "4") {
		// 	status400 += 1

		// } else {
		// 	status500 += 1
		// }
	}
	// wg.Done()
	// time.Sleep(time.Second)
	fmt.Println(status200)
	fmt.Println(status300)
	fmt.Println(status400)
	fmt.Println(status500)

}

func httpClientConcurrent(url string, client *http.Client) string {
	var responseCode string
	resp, err := client.Get(url)
	if err != nil {
		responseCode = "500"
	} else {
		responseCode = strconv.Itoa(resp.StatusCode)
	}
	fmt.Println(url, responseCode)
	return responseCode
}
